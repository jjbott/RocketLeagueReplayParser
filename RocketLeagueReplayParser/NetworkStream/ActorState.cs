using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace RocketLeagueReplayParser.NetworkStream
{
    public enum ActorStateState // Ugh what a horrible name.
    {
        Deleted,
        New,
        Existing
    }

    public class ActorState
    {
        public UInt32 Id { get; private set; }
        public ActorStateState State { get; private set; }
        public bool Unknown1 { get; private set; }
        public UInt32? NameId { get; private set; }
        public UInt32? TypeId { get; private set; }

        // Mainly storing class information so the info generated by ObjectNameToClassNetCache gets serialized.
        // Otherwise consumers have to have the same logic if they want to look up the class.
        public int? ClassId { get; private set; }

        private ClassNetCache _classNetCache;

        public Vector3D Position { get; private set; }
        public Rotator Rotation { get; private set; }

        public Dictionary<UInt32, ActorStateProperty> Properties { get; private set; } = new Dictionary<UInt32, ActorStateProperty>();
        
#if DEBUG
        private List<bool> KnownBits { get; set; }
        private List<bool> UnknownBits { get; set; }


        public bool Complete { get; set; } // Set to true when we're sure we read the whole thing
        public bool ForcedComplete { get; set; } // Set to true externally if we found a way to skip to the next ActorState
        public bool Failed { get; private set; }
#endif

        public static ClassNetCache ObjectNameToClassNetCache(string objectName, IDictionary<string, ClassNetCache> classNetCacheByName)
        {
            // Tried to put more likely cases towards the top of the switch, but didn't try very hard...
            switch (objectName)
            {
                case "Archetypes.Car.Car_Default":
                case "Mutators.Mutators.Mutators.FreePlay:CarArchetype":
                case "Mutators.Mutators.Mutators.OnlineFreeplay:CarArchetype":
                case "Archetypes.GameEvent.GameEvent_Season:CarArchetype":
                case "Archetypes.Car.Car_PostGameLobby":
                    return classNetCacheByName["TAGame.Car_TA"];
                case "Archetypes.Ball.Ball_Default":
                case "Archetypes.Ball.Ball_Basketball":
                case "Archetypes.Ball.Ball_BasketBall":
                case "Archetypes.Ball.Ball_BasketBall_Mutator":
                case "Archetypes.Ball.Ball_Puck":
                case "Archetypes.Ball.CubeBall":
                case "Archetypes.Ball.Ball_Beachball":
                case "Archetypes.Ball.Ball_Anniversary":
                case "Archetypes.Ball.Ball_Football":
                case "Archetypes.Ball.Ball_Ekin":
                    return classNetCacheByName["TAGame.Ball_TA"];
                case "Archetypes.Ball.Ball_Breakout":
                    return classNetCacheByName["TAGame.Ball_Breakout_TA"];
                case "Archetypes.Ball.Ball_Haunted":
                    return classNetCacheByName["TAGame.Ball_Haunted_TA"];
                case "Archetypes.Ball.Ball_God":
                    return classNetCacheByName["TAGame.Ball_God_TA"];
                case "Archetypes.CarComponents.CarComponent_Boost":
                    return classNetCacheByName["TAGame.CarComponent_Boost_TA"];
                case "Archetypes.CarComponents.CarComponent_Dodge":
                    return classNetCacheByName["TAGame.CarComponent_Dodge_TA"];
                case "Archetypes.CarComponents.CarComponent_DoubleJump":
                    return classNetCacheByName["TAGame.CarComponent_DoubleJump_TA"];
                case "Archetypes.CarComponents.CarComponent_FlipCar":
                case "Archetypes.KnockOut.GameEvent_Knockout:CarArchetype.Flip":
                    return classNetCacheByName["TAGame.CarComponent_FlipCar_TA"];
                case "Archetypes.CarComponents.CarComponent_Jump":
                case "Archetypes.KnockOut.GameEvent_Knockout:CarArchetype.Jump":
                    return classNetCacheByName["TAGame.CarComponent_Jump_TA"];
                case "Archetypes.Mutators.Mutator_Robin:DoubleJump":
                    return classNetCacheByName["TAGame.CarComponent_DoubleJump_Robin_TA"];
                case "Archetypes.Mutators.Mutator_Robin:Jump":
                    return classNetCacheByName["TAGame.CarComponent_Jump_Robin_TA"];
                case "Archetypes.Mutators.Mutator_Robin:AutoFlip":
                    return classNetCacheByName["TAGame.CarComponent_FlipCar_TA"];
                case "Archetypes.Teams.Team0":
                case "Archetypes.Teams.Team1":
                case "Archetypes.Teams.TeamWhite0":
                case "Archetypes.Teams.TeamWhite1":
                    return classNetCacheByName["TAGame.Team_Soccar_TA"];
                case "TAGame.Default__PRI_TA":
                    return classNetCacheByName["TAGame.PRI_TA"];
                case "Archetypes.GameEvent.GameEvent_Basketball":
                case "Archetypes.GameEvent.GameEvent_Hockey":
                case "Archetypes.GameEvent.GameEvent_Soccar":
                case "Archetypes.GameEvent.GameEvent_Items":
                case "Archetypes.GameEvent.GameEvent_SoccarLan":
                case "Gameinfo_Hockey.GameInfo.Gameinfo_Hockey:Archetype":
                case "GameInfo_Basketball.GameInfo.GameInfo_Basketball:Archetype":
                case "GameInfo_LTM_SpeedDemon.GameInfo.GameInfo_LTM_SpeedDemon:Archetype":
                    return classNetCacheByName["TAGame.GameEvent_Soccar_TA"];
                case "Archetypes.GameEvent.GameEvent_SoccarPrivate":
                case "Archetypes.GameEvent.GameEvent_BasketballPrivate":
                case "Archetypes.GameEvent.GameEvent_HockeyPrivate":
                    return classNetCacheByName["TAGame.GameEvent_SoccarPrivate_TA"];
                case "Archetypes.GameEvent.GameEvent_SoccarSplitscreen":
                case "Archetypes.GameEvent.GameEvent_BasketballSplitscreen":
                case "Archetypes.GameEvent.GameEvent_HockeySplitscreen":
                    return classNetCacheByName["TAGame.GameEvent_SoccarSplitscreen_TA"];
                case "Archetypes.GameEvent.GameEvent_Season":
                    return classNetCacheByName["TAGame.GameEvent_Season_TA"];
                case "Archetypes.GameEvent.GameEvent_Breakout":
                    return classNetCacheByName["TAGame.GameEvent_Breakout_TA"];
                case "GameInfo_Basketball.GameInfo.GameInfo_Basketball:GameReplicationInfoArchetype":
                case "Gameinfo_Hockey.GameInfo.Gameinfo_Hockey:GameReplicationInfoArchetype":
                case "GameInfo_Season.GameInfo.GameInfo_Season:GameReplicationInfoArchetype":
                case "GameInfo_Soccar.GameInfo.GameInfo_Soccar:GameReplicationInfoArchetype":
                case "GameInfo_Items.GameInfo.GameInfo_Items:GameReplicationInfoArchetype":
                case "GameInfo_Breakout.GameInfo.GameInfo_Breakout:GameReplicationInfoArchetype":
                case "gameinfo_godball.GameInfo.gameinfo_godball:GameReplicationInfoArchetype":
                case "GameInfo_GodBall.GameInfo.GameInfo_GodBall:GameReplicationInfoArchetype":
                case "GameInfo_FootBall.GameInfo.GameInfo_FootBall:GameReplicationInfoArchetype":
                case "GameInfo_FTE.GameInfo.GameInfo_FTE:GameReplicationInfoArchetype":
                case "GameInfo_KnockOut.KnockOut.GameInfo_KnockOut:GameReplicationInfoArchetype":
                case "GameInfo_LTM_SpeedDemon.GameInfo.GameInfo_LTM_SpeedDemon:GameReplicationInfoArchetype":
                    return classNetCacheByName["TAGame.GRI_TA"];
                case "ProjectX.Default__NetModeReplicator_X":
                    return classNetCacheByName["ProjectX.NetModeReplicator_X"];
                case "TAGame.Default__CameraSettingsActor_TA":
                    return classNetCacheByName["TAGame.CameraSettingsActor_TA"];
                case "Neotokyo_p.TheWorld:PersistentLevel.InMapScoreboard_TA_0":
                case "NeoTokyo_P.TheWorld:PersistentLevel.InMapScoreboard_TA_0":
                case "NeoTokyo_P.TheWorld:PersistentLevel.InMapScoreboard_TA_1":
                case "NeoTokyo_Standard_P.TheWorld:PersistentLevel.InMapScoreboard_TA_1":
                case "NeoTokyo_Standard_P.TheWorld:PersistentLevel.InMapScoreboard_TA_0":
                    return classNetCacheByName["TAGame.InMapScoreboard_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_GravityWell":
                    return classNetCacheByName["TAGame.SpecialPickup_BallGravity_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_BallVelcro":
                    return classNetCacheByName["TAGame.SpecialPickup_BallVelcro_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_BallLasso":
                    return classNetCacheByName["TAGame.SpecialPickup_BallLasso_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_BallGrapplingHook":
                    return classNetCacheByName["TAGame.SpecialPickup_GrapplingHook_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_Swapper":
                    return classNetCacheByName["TAGame.SpecialPickup_Swapper_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_BallFreeze":
                    return classNetCacheByName["TAGame.SpecialPickup_BallFreeze_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_BoostOverride":
                    return classNetCacheByName["TAGame.SpecialPickup_BoostOverride_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_Tornado":
                    return classNetCacheByName["TAGame.SpecialPickup_Tornado_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_CarSpring":
                case "Archetypes.SpecialPickups.SpecialPickup_BallSpring":
                    return classNetCacheByName["TAGame.SpecialPickup_BallCarSpring_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_StrongHit":
                    return classNetCacheByName["TAGame.SpecialPickup_HitForce_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_Batarang":
                    return classNetCacheByName["TAGame.SpecialPickup_Batarang_TA"];
                case "Neotokyo_p.TheWorld:PersistentLevel.InMapScoreboard_TA_1":
                    return classNetCacheByName["TAGame.InMapScoreboard_TA"];
                case "Haunted_TrainStation_P.TheWorld:PersistentLevel.HauntedBallTrapTrigger_TA_1":
                case "Haunted_TrainStation_P.TheWorld:PersistentLevel.HauntedBallTrapTrigger_TA_0":
                    return classNetCacheByName["TAGame.HauntedBallTrapTrigger_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_HauntedBallBeam":
                    return classNetCacheByName["TAGame.SpecialPickup_HauntedBallBeam_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_Rugby":
                    return classNetCacheByName["TAGame.SpecialPickup_Rugby_TA"];
                case "gameinfo_godball.GameInfo.gameinfo_godball:Archetype":
                case "GameInfo_GodBall.GameInfo.GameInfo_GodBall:Archetype":
                    return classNetCacheByName["TAGame.GameEvent_GodBall_TA"];
                case "TAGame.Default__MaxTimeWarningData_TA":
                    return classNetCacheByName["TAGame.MaxTimeWarningData_TA"];
                case "TAGame.Default__RumblePickups_TA":
                    return classNetCacheByName["TAGame.RumblePickups_TA"];
                case "Archetypes.SpecialPickups.SpecialPickup_Football":
                    return classNetCacheByName["TAGame.SpecialPickup_Football_TA"];
                case "GameInfo_FootBall.GameInfo.GameInfo_FootBall:Archetype":
                    return classNetCacheByName["TAGame.GameEvent_Football_TA"];
                case "TAGame.Default__PickupTimer_TA":
                    return classNetCacheByName["TAGame.PickupTimer_TA"];
                case "TAGame.Default__PRI_Breakout_TA":
                    return classNetCacheByName["TAGame.PRI_Breakout_TA"];
                case "Archetypes.GameEvent.GameEvent_FTE_Part1_Prime":
                    return classNetCacheByName["TAGame.GameEvent_FTE_TA"];
                case "Archetypes.KnockOut.GameEvent_Knockout":
                    return classNetCacheByName["TAGame.GameEvent_KnockOut_TA"];
                case "TAGame.Default__PRI_KnockOut_TA":
                    return classNetCacheByName["TAGame.PRI_KnockOut_TA"];
                case "Archetypes.KnockOut.GameEvent_Knockout:CarArchetype":
                    return classNetCacheByName["TAGame.Car_KnockOut_TA"];
                case "Archetypes.KnockOut.GameEvent_Knockout:CarArchetype.Torque":
                    return classNetCacheByName["TAGame.CarComponent_Torque_TA"];
                case "Archetypes.KnockOut.GameEvent_Knockout:CarArchetype.Dodge":
                    return classNetCacheByName["TAGame.CarComponent_Dodge_KO_TA"];
                case "Archetypes.KnockOut.GameEvent_Knockout:CarArchetype.DoubleJump":
                    return classNetCacheByName["TAGame.CarComponent_DoubleJump_KO_TA"];
                case "Archetypes.KnockOut.GameEvent_Knockout:CarArchetype.Boost":
                    return classNetCacheByName["TAGame.CarComponent_Boost_KO_TA"];
                case "Archetypes.KnockOut.GameEvent_Knockout:CarArchetype.StunlockArchetype":
                    return classNetCacheByName["TAGame.Stunlock_TA"];
            }

            if (objectName.Contains("ViralItemActor_TA"))
            {
                return classNetCacheByName["TAGame.ViralItemActor_TA"];
            }

            if (objectName.Contains("CrowdActor_TA"))
            {
                return classNetCacheByName["TAGame.CrowdActor_TA"];
            }
            else if (objectName.Contains("VehiclePickup_Boost_TA"))
            {
                return classNetCacheByName["TAGame.VehiclePickup_Boost_TA"];
            }
            else if (objectName.Contains("CrowdManager_TA"))
            {
                return classNetCacheByName["TAGame.CrowdManager_TA"];
            }
            else if (objectName.Contains("BreakOutActor_Platform_TA"))
            {
                return classNetCacheByName["TAGame.BreakOutActor_Platform_TA"];
            }
            else if (objectName.Contains("PlayerStart_Platform_TA"))
            {
                return classNetCacheByName["TAGame.PlayerStart_Platform_TA"];
            }

            var name = Regex.Replace(objectName, @"_\d+", "")
                .Split('.').Last()
                .Split(':').Last()
                //.Split(new string[] { "_TA" }, StringSplitOptions.RemoveEmptyEntries).First()
                .Replace("_Default", "_TA")
                .Replace("Archetype", "")
                .Replace("_0", "")
                .Replace("0", "_TA")
                .Replace("1", "_TA")
                .Replace("Default__", "");

            var matches = classNetCacheByName.Where(kv => kv.Key.Contains("." + name) );
            if ( !matches.Any() )
            {
                throw new NotSupportedException("Cant convert the following type to a class yet: " + objectName);
            }
            System.Diagnostics.Trace.WriteLine(string.Format("\r\nWarning, guessed class name {1} for type {0}", objectName, matches.Single().Key));
            return matches.Single().Value;
        }

        private static bool ClassHasInitialPosition(string className)
        {
            if (className == "TAGame.CrowdActor_TA"
                || className == "TAGame.CrowdManager_TA"
                || className == "TAGame.VehiclePickup_Boost_TA"
                || className == "TAGame.InMapScoreboard_TA"
                || className == "TAGame.BreakOutActor_Platform_TA"
                || className == "Engine.WorldInfo"
                || className == "TAGame.HauntedBallTrapTrigger_TA"
                || className == "TAGame.PlayerStart_Platform_TA")
            {
                return false;
            }

            return true;
        }

        private static bool ClassHasRotation(string className)
        {
            return className == "TAGame.Ball_TA"
                || className == "TAGame.Car_TA"
                || className == "TAGame.Car_Season_TA"
                || className == "TAGame.Ball_Breakout_TA"
                || className == "TAGame.Ball_Haunted_TA"
                || className == "TAGame.Ball_God_TA"
                || className == "TAGame.Car_KnockOut_TA";
		}

        public static ActorState Deserialize(int maxChannels, IDictionary<UInt32, ActorState> existingActorStates, List<ActorState> frameActorStates, string[] objectIndexToName, IDictionary<string, ClassNetCache> classNetCacheByName, UInt32 engineVersion, UInt32 licenseeVersion, UInt32 netVersion, UInt32 changelist, BitReader br)
        {
            var startPosition = br.Position;
			ActorState a = new ActorState();

			try
			{
                var actorId = br.ReadUInt32Max(maxChannels);

				a.Id = actorId;

				if (br.ReadBit())
				{
					if (br.ReadBit())
					{
						a.State = ActorStateState.New;
						
                        if (engineVersion > 868 || (engineVersion == 868 && licenseeVersion >= 14))
                        {
                            a.NameId = br.ReadUInt32(); 
                        }

                        a.Unknown1 = br.ReadBit();
                        a.TypeId = br.ReadUInt32();

						var typeName = objectIndexToName[(int)a.TypeId.Value];
                        a._classNetCache = ObjectNameToClassNetCache(typeName, classNetCacheByName);
                        a.ClassId = a._classNetCache.ObjectIndex;

                        if ( !ClassHasInitialPosition(objectIndexToName[a.ClassId.Value]))
						{
#if DEBUG
							a.KnownBits = br.GetBits(startPosition, br.Position - startPosition);
							a.Complete = true;
#endif
							return a;
						}

						a.Position = Vector3D.Deserialize(br, netVersion);

                        if (ClassHasRotation(objectIndexToName[a.ClassId.Value]))
                        {
                            a.Rotation = Rotator.Deserialize(br);
                        }
#if DEBUG
                        a.Complete = true;
#endif
					}
					else
					{
						a.State = ActorStateState.Existing;
                        var oldState = existingActorStates[a.Id];
                        
						ActorStateProperty lastProp = null;
						while (br.ReadBit())
						{
							lastProp = ActorStateProperty.Deserialize(oldState._classNetCache, objectIndexToName, engineVersion, licenseeVersion, netVersion, changelist, br);
                            
                            ActorStateProperty existingProperty = null;
                            if ( !a.Properties.TryGetValue(lastProp.PropertyId, out existingProperty) )
                            {
                                a.Properties.Add(lastProp.PropertyId, lastProp);
                            }
                            else
                            {
                                // Combine this property's data into the existing property's data.
                                // TODO: If/When concrete property types are created, we should convert to an array type

                                // The "pretty" json serializer methods try hard to avoid serializing extra data.
                                // But, it gets confused by these cases where we have multiple properties with the same name on a single ActorState.
                                // The serializer could consider them all as a single array of values, 
                                // but I think it makes more sense to treat them as an array in the parser.
                                // It probably more closely reflects the object in Rocket League that way.

                                // This implementation is a bit of a hack though. But the whole property class is a little hacky...

                                var listProperty = existingProperty as ActorStateListProperty;
                                if (listProperty == null)
                                {
                                    listProperty = new ActorStateListProperty(existingProperty);
                                    a.Properties[listProperty.PropertyId] = listProperty;
                                }

                                listProperty.Add(lastProp);
                            }
						}

#if DEBUG
						a.Complete = true;
#endif
                    }
                }
				else
				{
					a.State = ActorStateState.Deleted;
#if DEBUG
					a.Complete = true;
#endif
				}
#if DEBUG
				if (!a.Complete)
				{
					// Read a bunch of data so we have something to look at in the logs
					// Otherwise the logs may not show any data bits for whatever is broken, which is hard to interpret
					br.ReadBytes(16);
				}

				a.KnownBits = br.GetBits(startPosition, br.Position - startPosition);
#endif
				return a;
			}
			catch(Exception e)
			{
#if DEBUG
                a.KnownBits = br.GetBits(startPosition, br.Position - startPosition);
                a.UnknownBits = br.GetBits(br.Position, 100);
                Console.WriteLine(e.ToString());
				a.Failed = true;
				a.Complete = false;
				return a;
#else
				throw;
#endif
			}
        }

        public void Serialize(int maxChannels, string[] objectNames, UInt32 engineVersion, UInt32 licenseeVersion, UInt32 netVersion, UInt32 changelist, BitWriter bw)
        {
            bw.Write(Id, (UInt32)maxChannels);

            bw.Write(State != ActorStateState.Deleted); 
            if ( State == ActorStateState.Deleted)
            {
                return;
            }

            bw.Write(State == ActorStateState.New);  

            if ( State == ActorStateState.New)
            {
                if (engineVersion > 868 || (engineVersion == 868 && licenseeVersion >= 14))
                {
                    bw.Write(NameId.Value);
                }

                bw.Write(Unknown1);
                bw.Write(TypeId.Value);

                if (Position != null)
                {
                    Position.Serialize(bw, netVersion);
                }

                if (Rotation != null)
                {
                    Rotation.Serialize(bw);
                }
            }
            else if ( State == ActorStateState.Existing)
            {
                foreach (var property in Properties.Values)
                {
                    bw.Write(true); // Here comes a property!
                    property.Serialize(engineVersion, licenseeVersion, netVersion, changelist, bw);
                }
                bw.Write(false);
            }
            else // Deleted
            {
                // Nothing to do
            }
        }

        public string ToDebugString(string[] objects, string[] names)
        {
            var s = string.Format("ActorState: Id {0} State {1}\r\n", Id, State);

            if (NameId != null)
            {
                s += string.Format("    NameId: {0} ({1})\r\n", NameId.Value, names[NameId.Value]);
            }

            if (TypeId != null)
            {
                if (objects != null)
                {
                    if ( TypeId < 0 || TypeId >= objects.Length )
                    {
                        s += string.Format("    TypeId: {0} (BAD TYPE)\r\n",TypeId);
                    }
                    else
                    {
                        s += string.Format("    TypeId: {0} ({1})\r\n",TypeId, objects[TypeId.Value]);
                    }
                }
                else
                {
                    s += string.Format("    TypeId: {0}\r\n",TypeId);
                }
            }

            if (ClassId != null)
            {
                if (objects != null)
                {
                    if (ClassId < 0 || ClassId >= objects.Length)
                    {
                        s += string.Format("    ClassId: {0} (BAD CLASS)\r\n", ClassId);
                    }
                    else
                    {
                        s += string.Format("    ClassId: {0} ({1})\r\n", ClassId, objects[ClassId.Value]);
                    }
                }
                else
                {
                    s += string.Format("    ClassId: {0}\r\n", ClassId);
                }
            }

            if (Position != null)
            {
                s += string.Format("    Position: {0}\r\n", Position.ToDebugString());
            }
            if (Rotation != null)
            {
                s += string.Format("    Rotation: {0}\r\n", Rotation.ToDebugString());
            }

            if (Properties != null)
            {
                foreach(var p in Properties.Values)
                {
                    s += "    " + p.ToDebugString();
                }
            }
#if DEBUG
            if (KnownBits != null && KnownBits.Count > 0)
            {
                s += string.Format("    KnownBits: {0}\r\n", KnownBits.ToBinaryString());
            }
            if (UnknownBits != null && UnknownBits.Count > 0)
            {
                s += string.Format("    UnknownBits: {0}\r\n", UnknownBits.ToBinaryString());
            }
            if ( ForcedComplete )
            {
                s += "    Forced Complete!";
            }
            if (!Complete)
            {
                s += "    Incomplete!";
            }
#endif

            return s;
        }
    }
}
